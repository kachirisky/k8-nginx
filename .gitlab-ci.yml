stages:
  - build
  - deploy

variables:
  IMAGE: containerregistry.disney.com/wonderland/web-application
  AWSEKS: containerregistry.disney.com/eksctl/eksctl
  NAMESPACE: web-application
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://localhost:2375/
  DOCKER_TLS_CERTDIR: ''


build:
  stage: build
  image: containerregistry.disney.com/wonderland/docker:latest
  variables:
    BUILD_NUMBER: ${CI_PIPELINE_IID}
    BUILD_URL: ${CI_PIPELINE_URL}
    BUILD_TAG: ${CI_JOB_NAME}-${CI_PIPELINE_IID}
    GIT_HASH: ${CI_COMMIT_SHA}
  services:
    - docker:18.09.7-dind
  script:
    # The git and variable stuff is for our version endpoint.
    - apk add git
    - export GIT_COMMIT_LOG=$(git log --author "Weave Flux" --invert-grep --no-merges --pretty=format:"%h %<(40)%cD %<(25)%an %s" -n100)
    - echo $GIT_COMMIT_LOG
    - export BUILD_TIMESTAMP=$(date -u)
    - echo "$BUILD_TIMESTAMP"
    - export BUILD_TIMESTAMP="$(date -u)"
    - docker login -u ${DOCKER_USER} -p ${DOCKER_PASSWORD} containerregistry.disney.com
#    - docker build --build-arg BUILD_NUMBER=${BUILD_NUMBER} --build-arg BUILD_URL=${BUILD_URL} --build-arg BUILD_TAG=${BUILD_TAG} --build-arg BUILD_TIMESTAMP="$BUILD_TIMESTAMP" --build-arg GIT_HASH=${GIT_HASH} --build-arg GIT_COMMIT_LOG="$GIT_COMMIT_LOG" -t ${IMAGE}:${CI_PIPELINE_IID} -t ${IMAGE}:latest .
    - docker build --build-arg BUILD_NUMBER=${BUILD_NUMBER} --build-arg BUILD_URL=${BUILD_URL} --build-arg BUILD_TAG=${BUILD_TAG} --build-arg BUILD_TIMESTAMP="$BUILD_TIMESTAMP" --build-arg GIT_HASH=${GIT_HASH} --build-arg GIT_COMMIT_LOG="$GIT_COMMIT_LOG" -t ${IMAGE}:${CI_PIPELINE_IID} -t ${IMAGE}:blue .
    - echo ${IMAGE}:${CI_PIPELINE_IID}
    - docker push ${IMAGE}:${CI_PIPELINE_IID}
#    - docker push ${IMAGE}:latest
    - docker push ${IMAGE}:blue
  only:
    refs:
      - main
      - develop
  allow_failure: false
  tags:
    - kubernetes
  except:
    refs:
      - schedules

.aws-auth: &aws-auth
  - unset AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN AWS_ACCESS_KEY_ID AWS_ACCESS_KEY
  - response=$(aws sts assume-role --role-arn "${DEPLOYMENT_ROLE}" --role-session-name ${CI_PIPELINE_ID}@${CI_PROJECT_NAME})
  - export AWS_SECRET_ACCESS_KEY=$(echo $response | jq -r '.Credentials.SecretAccessKey')
  - export AWS_SESSION_TOKEN=$(echo $response | jq -r '.Credentials.SessionToken')
  - export AWS_ACCESS_KEY_ID=$(echo $response | jq -r '.Credentials.AccessKeyId')
  - echo "${AWS_ACCOUNT_ID}, ${AWS_DEFAULT_REGION}"
  - aws eks update-kubeconfig --name ${CLUSTER_NAME} --region ${AWS_DEFAULT_REGION} || true

dev:
  stage: deploy
  image: ${AWSEKS}
  variables:
    CLOUD_ENV_NAME: wonderland
    AWS_ACCOUNT_ID: "861209577378"
    DEPLOYMENT_ROLE: arn:aws:iam::${AWS_ACCOUNT_ID}:role/dtci-cdeng-cicd-admin
    CLUSTER_NAME: wonderland
  script:
    - *aws-auth
    - kubectl rollout restart deployment -n ${NAMESPACE}
    - kubectl get pods -n ${NAMESPACE} || true
  tags:
    - kubernetes
  only:
    - main
